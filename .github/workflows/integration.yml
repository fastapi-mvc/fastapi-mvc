name: K8s integration

on:
  workflow_dispatch:

env:
  POETRY_HOME: /tmp/poetry
  POETRY_CONFIG_DIR: /tmp/poetry
  POETRY_VIRTUALENVS_PATH: /tmp/poetry/store

jobs:
  # This job checks if an identical workflow is being triggered by different
  # event and skips it. For instance there is no need to run the same pipeline
  # twice for pull_request and push for identical commit sha.
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  install:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Init Poetry cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-3.9-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install package
        run: make install
        if: steps.cached-poetry.outputs.cache-hit != 'true'
  test-redis-ha:
    needs: install
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-3.9-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Set fastapi-mvc path
        run: echo "FASTAPI_MVC_BIN=$($POETRY_HOME/bin/poetry env info -p)/bin/fastapi-mvc" >> $GITHUB_ENV
      - name: Generate test-project
        run: $FASTAPI_MVC_BIN new --skip-install --no-interaction test-project
      - name: Generate test controller
        working-directory: ./test-project
        run: $FASTAPI_MVC_BIN generate controller foobar index create:post update:put delete:delete
      - name: Run vagrant up
        working-directory: ./test-project
        run: vagrant up
      - name: Bootstrap minukube cluster and Redis operator
        working-directory: ./test-project
        run: vagrant ssh -c "cd /syncd && make dev-env"
      - name: Test exposed fastapi_mvc application
        working-directory: ./test-project
        run: vagrant ssh -c 'curl "http://test-project.$(minikube ip).nip.io/api/ready"'
      - name: Test generated foobar controller
        working-directory: ./test-project
        run: |
          vagrant ssh -c 'curl "http://test-project.$(minikube ip).nip.io/api/foobar/index"'
          vagrant ssh -c 'curl -X POST "http://test-project.$(minikube ip).nip.io/api/foobar/create"'
          vagrant ssh -c 'curl -X PUT "http://test-project.$(minikube ip).nip.io/api/foobar/update"'
          vagrant ssh -c 'curl -X DELETE "http://test-project.$(minikube ip).nip.io/api/foobar/delete"'
  test-minimal:
    needs: install
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-3.9-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Set fastapi-mvc path
        run: echo "FASTAPI_MVC_BIN=$($POETRY_HOME/bin/poetry env info -p)/bin/fastapi-mvc" >> $GITHUB_ENV
      - name: Generate test-project
        run: $FASTAPI_MVC_BIN new --skip-redis --skip-aiohttp --skip-actions --skip-install --no-interaction test-project
      - name: Generate test controller
        working-directory: ./test-project
        run: $FASTAPI_MVC_BIN generate controller foobar index create:post update:put delete:delete
      - name: Run vagrant up
        working-directory: ./test-project
        run: vagrant up
      - name: Bootstrap minukube cluster and Redis operator
        working-directory: ./test-project
        run: vagrant ssh -c "cd /syncd && make dev-env"
      - name: Test exposed fastapi_mvc application
        working-directory: ./test-project
        run: vagrant ssh -c 'curl "http://test-project.$(minikube ip).nip.io/api/ready"'
      - name: Test generated foobar controller
        working-directory: ./test-project
        run: |
          vagrant ssh -c 'curl "http://test-project.$(minikube ip).nip.io/api/foobar/index"'
          vagrant ssh -c 'curl -X POST "http://test-project.$(minikube ip).nip.io/api/foobar/create"'
          vagrant ssh -c 'curl -X PUT "http://test-project.$(minikube ip).nip.io/api/foobar/update"'
          vagrant ssh -c 'curl -X DELETE "http://test-project.$(minikube ip).nip.io/api/foobar/delete"'